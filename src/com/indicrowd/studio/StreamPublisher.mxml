<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
				xmlns:s="library://ns.adobe.com/flex/spark"
				xmlns:mx="library://ns.adobe.com/flex/mx"
				width="800" height="360" minWidth="480" minHeight="360" horizontalScrollPolicy="off"
				initialize="init()" layout="absolute" verticalScrollPolicy="off">
	<fx:Script>
		<![CDATA[
			import flash.external.*;
			import flash.media.scanHardware;
			import flash.utils.setInterval;
			
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.events.SliderEvent;
			import mx.events.ToolTipEvent;
			import mx.rpc.events.ResultEvent;
			
			[Bindable]
			private var serverInfoURL:String = "/server/streaming/optimal.json";
			[Bindable]
			private var concertStateURL:String = "/concert/${concertId}/state.json";
			[Bindable]
			private var remainTimeURL:String = "/concert/${concertId}/remainTime.json";
			[Bindable]
			private var chatServiceURL:String = "/concert/chat.json";
			private var urlPrefix:String = "/IndiCrowd";
			
			private var nc:NetConnection = null;
			private var camera:Camera;
			private var microphone:Microphone;
			private var nsPublish:NetStream = null;  
			private var connStr:String;
			[Bindable]
			private var pubStreamStr:String;
			
			private var remainTime:int = 0;
			
			private var camWidth:uint = 640;
			private var camHeight:uint = 480;
			private var camFPS:uint = 26;
			private var camQuality:uint = 100;
			private var camOnline:Boolean = true;
			
			private var micRateSel:Array = [ 5, 8, 11, 22, 44 ];
			private var micRate:uint = 4;
			private var micEncodeQuality:uint = 10;
			private var micEncodeGain:Number = 50;
			private var micPlay:Boolean = true;
			private var micCodec:String = SoundCodec.SPEEX;
			
			private var handleUpdateCamValue:uint;
			private var handleUpdateMICValue:uint;
			private var handleUpdateRemainTime:uint;
			
			private var openSetting:Boolean = false;
			
			[Bindable]
			private var acCameraData:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			private var acMICData:ArrayCollection = new ArrayCollection();
			
			
			/**
			 * 전송 스트림 이름 설정 
			 */
			public function setPubStreamStr(pubstr:String):void
			{
				pubStreamStr = pubstr;
			}
			
			
			/**
			 * 전송 스트림 이름 가져오기  
			 */
			public function getPubStreamStr():String
			{
				return pubStreamStr;
			}
			
			
			/**
			 * 어플리케이션이 시작되면 무조건 호출되는 함수 
			 * 
			 */
			public function init():void
			{
				//flash.media.scanHardware();
				var initSuccess:Boolean = startCamera();
				
				if (!initSuccess)
				{
					btnStartPublish.enabled = false;
				}
				
				// 시작 변수 받아오기 
				pubStreamStr =  FlexGlobals.topLevelApplication.parameters.pubStreamStr;
				urlPrefix =  FlexGlobals.topLevelApplication.parameters.urlPrefix;
				serverInfoURL = urlPrefix + serverInfoURL;
				concertStateURL = urlPrefix + concertStateURL;
				concertStateURL = concertStateURL.replace("${concertId}", pubStreamStr);
				remainTimeURL = urlPrefix + remainTimeURL;
				remainTimeURL = remainTimeURL.replace("${concertId}", pubStreamStr);
				chatServiceURL = urlPrefix + chatServiceURL;
				
				trace(concertStateURL);
				
				handleUpdateRemainTime = setInterval(updateRemainTime, 1000);
				
				// 외부 자바스크립트 호출 함수 등록  
				ExternalInterface.addCallback("setPubStreamStr", setPubStreamStr);
				ExternalInterface.addCallback("getPubStreamStr", getPubStreamStr);
				ExternalInterface.addCallback("changeState", changeState);
				
				serverInfoService.send();
				concertStateService.send();
				remainTimeService.send();
			}
			
			
			
			private function sendChatMessage(message:String):void {
				var params:Object = new Object();
				params.concertId = pubStreamStr;
				params.content = message;
				
				sendChatService.send(params);
			}
			
			/**
			 * 방송하기 버튼을 클릭하면 호출되는 함수
			 * @event 마우스 클릭 이벤트 변경 
			 */
			private function doLive(event:MouseEvent):void
			{
				btnStartPublish.enabled = false;
				if (btnStartPublish.label == "방송하기")
				{
					startLive();
				}
				else
				{
					stopLive();
				}
				btnStartPublish.enabled = true;
			}
			
			
			/**
			 * 방송 시작 
			 * 
			 */
			private function startLive():void
			{
				startPublish();
				sendChatMessage("<font style=\"font-weight:bold;color:#aa0000;\">[공지] 방송이 시작되었습니다~!</font>");
				btnStartPublish.label = "방송중지";
			}
			
			/**
			 *  방송 정지 
			 */
			private function stopLive():void
			{
				if (nsPublish != null)
				{
					sendChatMessage("<font style=\"font-weight: bold;color:#aa0000;\">[공지] 방송이 끝났습니다~!</font>");
				}
				stopPublish();
				
				btnStartPublish.label = "방송하기";
			}
			
			private function scanCamera():void
			{
				acCameraData.removeAll();
				
				var count:int = 0;
				
				for(var i:uint; i < Camera.names.length; i++)
				{
					var cam:Camera = Camera.getCamera( String(i) );
					acCameraData.addItem( { label:cam.name, data:String(i) });
				}
				
				trace("Camera List : " + Camera.names.toString());
			}
			
			private function scanMIC():void
			{
				acMICData.removeAll();
				
				var count:int = 0;
				
				for(var i:uint; i < Microphone.names.length; i++)
				{
					var mic:Microphone = Microphone.getEnhancedMicrophone(i);
					acMICData.addItem( { label:mic.name, data:String(i) });
				}
			}
			
		
			private function startCamera():Boolean
			{	
				// get the default Flash camera and microphone
				camera = Camera.getCamera();
				microphone = Microphone.getEnhancedMicrophone();
				
				// here are all the quality and performance settings that we suggest
				if(camera != null)
				{
					changeCamera(0);
				}
				else
				{
					mx.controls.Alert.show("카메라가 설치되어 있지 않습니다.");
					return false;
				}
				if( microphone != null)
				{
					changeMIC(0);
				}
				else
				{
					mx.controls.Alert.show("마이크가 설치되어 있지 않습니다.");
					return false;
				}
				
				return true;
			}
			
			
			private function changeCamera(index:int = -1):void 
			{
				if (index != -1)
				{
					camera = Camera.getCamera(String(index));
					videoCamera.attachCamera(camera);
				}			
			
				
				camera.setKeyFrameInterval(48);
				camera.setMode(camWidth, camHeight, camFPS, false);
				camera.setQuality(0, camQuality);
				
				if (nsPublish != null)
				{
					var h264Settings:H264VideoStreamSettings = new H264VideoStreamSettings();
					h264Settings.setProfileLevel(H264Profile.MAIN, H264Level.LEVEL_4);
					h264Settings.setQuality(0, camQuality);
					h264Settings.setKeyFrameInterval(48);
					h264Settings.setMode(camWidth, camHeight, camFPS);
					nsPublish.videoStreamSettings = h264Settings;
					
					if ( index != -1 ){
						nsPublish.attachCamera(camera);
					}
				}
				
				
			}
			
			
			private function changeMIC(index:int = -1):void 
			{
				if (index != -1)
				{
					microphone = Microphone.getEnhancedMicrophone(index);
				}
				
				microphone.codec = micCodec;
				microphone.rate = micRateSel[micRate];
				microphone.encodeQuality = micEncodeQuality;
				microphone.gain = micEncodeGain;
				microphone.setSilenceLevel(0); 
				microphone.setUseEchoSuppression(true);
			
				
				var options:MicrophoneEnhancedOptions = new MicrophoneEnhancedOptions();
				options.mode = MicrophoneEnhancedMode.HALF_DUPLEX;
				options.autoGain = true;
				options.nonLinearProcessing = false;
				options.isVoiceDetected = -1;
				microphone.enhancedOptions = options;
				
				
				if (nsPublish != null)
				{
					nsPublish.attachAudio(microphone);	
				} else {
				}
				
			}
			
			private function ncOnStatus(infoObject:NetStatusEvent):void
			{
				trace("nc: "+infoObject.info.code+" ("+infoObject.info.description+")");
				
				if (infoObject.info.code == "NetStream.Publish.Denied") {
					trace("System can't publish live movie!");
					stopLive();
					mx.controls.Alert.show("방송 가능 시간이 아닙니다!!");
				}
				else if (infoObject.info.code == "NetConnection.Connect.Failed")
				{
					boxError.visible = true;
					trace("NetConnection.Connect.Failed");
					// 접속 실패
				} else if (infoObject.info.code == "NetConnection.Connect.Rejected") {
					trace("NetConnection.Connect.Rejected");
					boxError.visible = true;
					//mx.controls.Alert.show("방송 가능 시간이 아닙니다!!");
					// 연결 거부
				} else if (infoObject.info.code == "NetConnection.Connect.Closed") {
					stopLive();
					boxError.visible = true;	
				}
			}
			
			
			private function connect():void
			{
				// connect to the Wowza Media Server
				if (nc == null)
				{
					// create a connection to the wowza media server
					nc = new NetConnection();
					nc.connect(connStr);
					trace("Connect : " + connStr);
					
					// get status information from the NetConnection object
					nc.addEventListener(NetStatusEvent.NET_STATUS, ncOnStatus);
					
				}
			}
			
			private function disconnect():void
			{
				if (nsPublish != null)
					stopLive();
				
				nsPublish = null;
				
				nc.close();
				nc = null;
			}
			
			
			// function to monitor the frame rate and buffer length
			private function updateStreamValues():void
			{
				if (fpsText == null || bufferLenText == null)
					return ;
				
				if (nsPublish != null)
				{
					fpsText.text = (Math.round(nsPublish.currentFPS*1000)/1000)+" fps";
					bufferLenText.text = (Math.round(nsPublish.bufferLength*1000)/1000)+" secs";
				}
				else
				{
					fpsText.text = "";
					bufferLenText.text = "";
				}
			}
			
			private function updateMICValues():void
			{
				if (soundLevel == null)
					return ;
				
				if (microphone != null)
				{
					var alevel:int = microphone.activityLevel;
					if (alevel == -1)
					{
						soundLevel.text = "동작안함";
					} else {
						soundLevel.text = String(alevel);
					}
				}
			}
			
			private function updateRemainTime():void
			{
				var remainTimeText:String = "";
				this.remainTime++;
				var remainTime:int = this.remainTime < 0 ? -this.remainTime : this.remainTime;
				
				if (this.remainTime < 0)
				{
					remainTimeText = "-";
				}
				
				var hours:int = remainTime / 3600;
				var minutes:int = (remainTime % 3600 ) / 60 ;
				var seconds:int = (remainTime % 3600 ) % 60;
				
				if (hours != 0)
				{
					if ( hours < 10 ) {
						remainTimeText += "0";
					}
					remainTimeText += hours + ":";
				}
				
				
				if ( minutes < 10 ) {
					remainTimeText += "0";
				}
				remainTimeText += minutes + ":";
				
				
				if ( seconds < 10 ) {
					remainTimeText += "0";
				}
				remainTimeText += seconds;
				
				lblReaminTime.text = remainTimeText;
			}
			
			private function nsPublishOnStatus(infoObject:NetStatusEvent):void
			{
				trace("nsPublish: "+infoObject.info.code+" ("+infoObject.info.description+")");
				//if (infoObject.info.code == "NetStream.Play.StreamNotFound" || infoObject.info.code == "NetStream.Play.Failed")
				//prompt.text = infoObject.info.description;
				
				if (infoObject.info.code == "NetStream.Publish.Start") {
					lblLiveMark.visible = true;
				}
				
			}
			
			private function startPublish():void
			{
				// create a new NetStream object for video publishing
				nsPublish = new NetStream(nc);
				
				nsPublish.addEventListener(NetStatusEvent.NET_STATUS, nsPublishOnStatus);
				
				// set the buffer time to zero since it is chat
				nsPublish.bufferTime = 0;
				
				var h264Settings:H264VideoStreamSettings = new H264VideoStreamSettings();
				h264Settings.setProfileLevel(H264Profile.MAIN, H264Level.LEVEL_4);
				h264Settings.setQuality(0, camQuality);
				h264Settings.setKeyFrameInterval(48);
				h264Settings.setMode(camWidth, camHeight, camFPS);
				nsPublish.videoStreamSettings = h264Settings;
				
				// publish the stream by name
				nsPublish.publish(pubStreamStr, "append");
				
				// add custom metadata to the stream
				var metaData:Object = new Object();
				metaData["description"] = "Chat using VideoChat example."
				nsPublish.send("@setDataFrame", "onMetaData", metaData);
				
				// attach the camera and microphone to the server
				if (camOnline)
					nsPublish.attachCamera(camera);
				
				if (micPlay)
					nsPublish.attachAudio(microphone);
			}
			
			private function stopPublish():void
			{
				if(nsPublish != null) {
					nsPublish.attachCamera(null);
					nsPublish.attachAudio(null);
					nsPublish.publish("null");
					nsPublish.close();
					nsPublish = null;
				}
				
				
				lblLiveMark.visible = false;
			}
			
			protected function listCamera_initializeHandler(event:FlexEvent):void
			{
				scanCamera();
			}
			
			protected function listCamera_changeHandler(event:ListEvent):void
			{
				changeCamera(event.currentTarget.selectedIndex);
			}
			
			protected function listMIC_initializeHandler(event:FlexEvent):void
			{
				scanMIC();
			}
			
			protected function listMIC_changeHandler(event:ListEvent):void
			{
				changeMIC(event.currentTarget.selectedIndex);
			}
			
			protected function slideCamQuality_changeHandler(event:SliderEvent):void
			{
				camQuality = slideCamQuality.value;
				
				changeCamera();
			}
			
			protected function slideCamQuality_initializeHandler(event:FlexEvent):void
			{
				slideCamQuality.value = camQuality;
			}
			
			protected function slideMICQuality_changeHandler(event:SliderEvent):void
			{
				micRate = slideMICQuality.value;
			
				changeMIC();
			}
			
			protected function slideMICGain_initializeHandler(event:FlexEvent):void
			{
				slideMICGain.value =  micEncodeGain;		
			}
			
			protected function slideMICGain_changeHandler(event:SliderEvent):void
			{
				micEncodeGain = slideMICGain.value;
				changeMIC();
			}
			
			protected function slideMICQuality_initializeHandler(event:FlexEvent):void
			{
				slideMICQuality.value = micRate;
			}
			
			private function micToolTipFunc(val:String):String {
				switch(int(val))
				{
					case 0:
						return "최저품질";
						break;
					case 1:
						return "저품질";
						break;
					case 2:
						return "중간품질";
						break;
					case 3:
						return "고품질";
						break;
					case 4:
						return "최고품질";
						break;			
				}
				
				return "";
			}
			
			
			/* 캠 퀄리티 자동으로 변경 */
			protected function cbCamQualityAuto_changeHandler(event:Event):void
			{
				if(cbCamQualityAuto.selected)
				{
					camQuality = 0;
					slideCamQuality.enabled = false;
				} else {
					camQuality = slideCamQuality.value;
					slideCamQuality.enabled = true;
				}
				
				changeCamera();
			}
			
			
			protected function cbCameraHD_changeHandler(event:Event):void
			{
				if (cbCameraHD.selected)
				{
					camHeight = 720;
					camWidth = 1280;
				} else {
					camHeight = 640;
					camWidth = 480;
				}
				changeCamera();
			}
			
			protected function cbMicPlay_changeHandler(event:Event):void
			{
				micPlay = cbMicPlay.selected;
				
				if (nsPublish != null)
				{
					if (micPlay) 
					{
						nsPublish.attachAudio(microphone);
					}
					else 
					{
						nsPublish.attachAudio(null);
					}
				}
				
			}
			
			protected function cbCamOnline_changeHandler(event:Event):void
			{
				camOnline = cbCamOnline.selected;
				
				if (nsPublish != null)
				{
					if (camOnline) 
					{
						nsPublish.attachCamera(camera);
					}
					else 
					{
						nsPublish.attachCamera(null);
					}
				}
			}
			
			
			protected function btnSetting_clickHandler(event:MouseEvent):void
			{
				openSetting = !openSetting;
				
				if (openSetting)
				{
					this.width = 480;
				} else {
					this.width = 800;	
				}
				flash.external.ExternalInterface.call("resizeStreamPublisher", this.width, this.height);
			}
			
			
			private function readServerInfo(event:ResultEvent):void
			{				
				var result:Object = JSON.parse(event.result as String);
				
				connStr = "rtmp://" + result.command.hostname + ":" + result.command.rtmpPort + "/live";
				//connStr = "rtmp://localhost/live";
				
				connect();
				
				// 성능 주기적으로 출력 
				handleUpdateCamValue = setInterval(updateStreamValues, 500);
				handleUpdateMICValue = setInterval(updateMICValues, 100);
			}
			
			
			private function changeState(state:String):void {
				
				boxEnd.visible = false;
				
				if (state == "PLAYING" || state == "ENCORE")
				{
					canvasWaiting.visible = false;
					canvasPublish.visible = true;
					lblReaminTime.setStyle("color", "#FF0000");
					
					if (cbAutoLive.selected) {
						startLive();
					}
					
				} else if (state == "RESERVE" || state == "REHEARSAL") {
					canvasWaiting.visible = true;
					canvasPublish.visible = false;
					lblReaminTime.setStyle("color", "#00FF00");
					lblWaitingText.text = "공연까지 아직 시간이 남았습니다.";
				} else if (state == "END") {
					stopLive();
					disconnect();
					canvasWaiting.visible = true;
					canvasPublish.visible = false;
					boxRemainTime.visible = false;
					lblLiveMark.visible = false;
					boxEnd.visible = true;
					lblReaminTime.setStyle("color", "#0000FF");
					remainTime = remainTime < 0 ? remainTime : remainTime;
					lblWaitingText.text = "공연이 끝났습니다.";
				} else {
					canvasWaiting.visible = true;
					canvasPublish.visible = false;
					lblLiveMark.visible = false;
					lblWaitingText.text = "공연이 실패하였습니다.";
				}
				
				remainTimeService.send();
			}
			
			
			private function readConcertState(event:ResultEvent):void
			{				
				var result:Object = JSON.parse(event.result as String);
				
				changeState(result.command);
			}
			
			
			private function readRemainTime(event:ResultEvent):void
			{				
				var result:Object = JSON.parse(event.result as String);
				
				// 시각 등록
				remainTime =  parseInt(result.long) / 1000 * -1;
				trace("remainTime : " + remainTime);
			}
			
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<mx:HTTPService id="serverInfoService" url="{serverInfoURL}" useProxy="false" method="GET" result="readServerInfo(event)" showBusyCursor="true">
			<mx:request xmlns="">
			</mx:request>
		</mx:HTTPService>
		<mx:HTTPService id="concertStateService" url="{concertStateURL}" useProxy="false" method="GET" result="readConcertState(event)" showBusyCursor="true">
			<mx:request xmlns="">
			</mx:request>
		</mx:HTTPService>
		<mx:HTTPService id="remainTimeService" url="{remainTimeURL}" useProxy="false" method="GET" result="readRemainTime(event)" showBusyCursor="true">
			<mx:request xmlns="">
			</mx:request>
		</mx:HTTPService>
		<s:HTTPService id="sendChatService" url="{chatServiceURL}" useProxy="false" method="POST" showBusyCursor="false">
			<mx:request xmlns="">
			</mx:request>
		</s:HTTPService>
	</fx:Declarations>
	
	<mx:VideoDisplay id="videoCamera" x="0" y="0" width="480" height="360" autoPlay="false"/>
	<mx:TabNavigator x="480" y="0" width="320" height="360">
		<mx:Canvas width="100%" height="100%" label="하드웨어 설정">
			<mx:Label x="10" y="10" text="카메라 : "/>
			<mx:Label x="10" y="62" text="카메라 품질 : "/>
			<mx:Label x="10" y="92" text="마이크 품질 : "/>
			<mx:Label x="10" y="120" text="마이크 증폭 : "/>
			<mx:Label x="10" y="149" text="마이크 감도 :"/>
			<mx:Label x="10" y="36" text="마이크 :"/>
			<mx:ComboBox id="listCamera" y="4" left="81" width="160"
						 change="listCamera_changeHandler(event)" dataProvider="{acCameraData}"
						 initialize="listCamera_initializeHandler(event)"></mx:ComboBox>
			<mx:ComboBox id="listMIC" y="34" left="81" width="160"
						 change="listMIC_changeHandler(event)" dataProvider="{acMICData}"
						 initialize="listMIC_initializeHandler(event)"></mx:ComboBox>
			<mx:HSlider id="slideCamQuality" x="81" y="62"
						change="slideCamQuality_changeHandler(event)"
						initialize="slideCamQuality_initializeHandler(event)" maximum="100"
						minimum="1" tickInterval="20"/>
			<mx:HSlider id="slideMICQuality" x="81" y="90"
						change="slideMICQuality_changeHandler(event)"
						initialize="slideMICQuality_initializeHandler(event)" maximum="4"
						minimum="0" snapInterval="1" tickValues="[0,1,2,3,4] "
						dataTipFormatFunction="micToolTipFunc" />
			<mx:HSlider id="slideMICGain" x="81" y="118"
						change="slideMICGain_changeHandler(event)"
						initialize="slideMICGain_initializeHandler(event)"
						maximum="100"
						minimum="0" snapInterval="0.01" tickInterval="10"/>
			<mx:CheckBox id="cbCameraHD" visible="false" x="249" y="6" label="HD"
						 change="cbCameraHD_changeHandler(event)"/>
			<mx:CheckBox id="cbCamQualityAuto" x="249" y="61" label="자동"
						  change="cbCamQualityAuto_changeHandler(event)" />
			<mx:CheckBox id="cbMicPlay" x="62" y="36" change="cbMicPlay_changeHandler(event)"
						 selected="true"/>
			<mx:CheckBox id="cbCamOnline" x="62" y="8" change="cbCamOnline_changeHandler(event)"
						 selected="true"/>
			<mx:Label id="soundLevel" x="83" y="148" width="75"/>
		</mx:Canvas>
		<mx:Canvas width="100%" height="100%" label="디버깅 콘솔">
			<mx:Label id="fpsText" x="57" y="17" width="75"/>
			<mx:Label id="bufferLenText" x="57" y="43" width="75"/>
		</mx:Canvas>
	</mx:TabNavigator>
	<mx:Canvas id="canvasPublish" x="0" y="328" width="480" height="32" alpha="1.0" backgroundAlpha="0.0">
		<mx:Button id="btnStartPublish" x="10" y="5" label="방송하기" click="doLive(event)"/>
	</mx:Canvas>
	<mx:Canvas id="canvasWaiting" backgroundColor="#F3FDFE" x="0" y="328" width="480" height="32" alpha="1.0" backgroundAlpha="1.0">
		<mx:Label id="lblWaitingText" x="5" y="5" width="470" height="22" />
		<mx:CheckBox id="cbAutoLive" x="309" y="7" label="자동방송시작"/>
	</mx:Canvas>
	
	<mx:Box id="boxRemainTime" x="397" y="10" width="75" height="25" label="00:00"
			backgroundColor="#FFFFFF" cornerRadius="7" fontFamily="Arial" fontWeight="bold"
			horizontalAlign="center" horizontalScrollPolicy="off" textAlign="center"
			verticalAlign="middle" verticalScrollPolicy="off"> 
		<mx:Label id="lblReaminTime"
				 color="#000000" fontFamily="Arial" fontSize="16" fontWeight="bold" text="00:00"
				 textAlign="center"/>
	</mx:Box>
	<s:Label id="lblLiveMark" visible="false" x="0" y="0" width="60" height="31"
			 backgroundColor="#FF0000" color="#FFFFFF" fontFamily="Arial" fontSize="16"
			 fontWeight="bold" text="LIVE" textAlign="center" verticalAlign="middle"/>
	<mx:Box id="boxEnd" x="96" y="85" width="277" height="167"
			backgroundAlpha="0.47" backgroundColor="#0000FF" cornerRadius="20" fontFamily="Arial" fontWeight="bold"
			horizontalAlign="center" horizontalScrollPolicy="off" textAlign="center"
			verticalAlign="middle" verticalScrollPolicy="off"> 
		<s:Label id="lblEndMark" visible="true" color="#FFFFFF" fontFamily="Arial"
				 fontSize="60" fontWeight="bold" text="방송종료" textAlign="center" verticalAlign="middle"/>
		 
	</mx:Box>
	<mx:Box id="boxError" x="96" y="85" width="277" height="167" backgroundAlpha="0.47"
			backgroundColor="#0000FF" cornerRadius="20" fontFamily="Arial" fontWeight="bold"
			horizontalAlign="center" horizontalScrollPolicy="off" textAlign="center"
			verticalAlign="middle" verticalScrollPolicy="off" visible="false">
		<s:Label id="lblEndMark0" visible="true" color="#FFFFFF" fontFamily="Arial"
				 fontSize="12" fontWeight="bold" text="통신 상황이 좋지 않습니다. &#xd;인터넷 상태를 다시 확인하시고 리프레쉬해주세요. &#xd;반복해서 발생하면 관리자에게 연락해주세요." textAlign="center" verticalAlign="middle"/>
	</mx:Box>
	<mx:Button id="btnSetting" x="398" y="333" label="설정" click="btnSetting_clickHandler(event)"/>
</mx:Application>
